// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vec2 } from '../editor-messages/vec2.js';
import { Vec3 } from '../editor-messages/vec3.js';


export class Transform {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Transform {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTransform(bb:flatbuffers.ByteBuffer, obj?:Transform):Transform {
  return (obj || new Transform()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTransform(bb:flatbuffers.ByteBuffer, obj?:Transform):Transform {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Transform()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

position(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb!) : null;
}

scale(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

skew(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

pivot(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
}

rotation():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startTransform(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, positionOffset, 0);
}

static addScale(builder:flatbuffers.Builder, scaleOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, scaleOffset, 0);
}

static addSkew(builder:flatbuffers.Builder, skewOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, skewOffset, 0);
}

static addPivot(builder:flatbuffers.Builder, pivotOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, pivotOffset, 0);
}

static addRotation(builder:flatbuffers.Builder, rotation:number) {
  builder.addFieldFloat32(4, rotation, 0.0);
}

static endTransform(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // position
  builder.requiredField(offset, 6) // scale
  builder.requiredField(offset, 8) // skew
  builder.requiredField(offset, 10) // pivot
  return offset;
}

}
