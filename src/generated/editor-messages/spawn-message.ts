// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Color } from '../editor-messages/color.js';
import { ColorRender } from '../editor-messages/color-render.js';
import { Transform } from '../editor-messages/transform.js';


export class SpawnMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SpawnMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSpawnMessage(bb:flatbuffers.ByteBuffer, obj?:SpawnMessage):SpawnMessage {
  return (obj || new SpawnMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSpawnMessage(bb:flatbuffers.ByteBuffer, obj?:SpawnMessage):SpawnMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SpawnMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

transform(obj?:Transform):Transform|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Transform()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

color(obj?:Color):Color|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Color()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

colorRender(obj?:ColorRender):ColorRender|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ColorRender()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startSpawnMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTransform(builder:flatbuffers.Builder, transformOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, transformOffset, 0);
}

static addColor(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, colorOffset, 0);
}

static addColorRender(builder:flatbuffers.Builder, colorRenderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, colorRenderOffset, 0);
}

static endSpawnMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // transform
  builder.requiredField(offset, 6) // color
  builder.requiredField(offset, 8) // color_render
  return offset;
}

}
