// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ColorRGBA } from '../editor-messages/color-rgba.js';


export class Color {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Color {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsColor(bb:flatbuffers.ByteBuffer, obj?:Color):Color {
  return (obj || new Color()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsColor(bb:flatbuffers.ByteBuffer, obj?:Color):Color {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Color()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value(obj?:ColorRGBA):ColorRGBA|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ColorRGBA()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startColor(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, valueOffset, 0);
}

static endColor(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // value
  return offset;
}

static createColor(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset):flatbuffers.Offset {
  Color.startColor(builder);
  Color.addValue(builder, valueOffset);
  return Color.endColor(builder);
}
}
