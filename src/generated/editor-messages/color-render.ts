// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ColorRender {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ColorRender {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsColorRender(bb:flatbuffers.ByteBuffer, obj?:ColorRender):ColorRender {
  return (obj || new ColorRender()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsColorRender(bb:flatbuffers.ByteBuffer, obj?:ColorRender):ColorRender {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ColorRender()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

visible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startColorRender(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addVisible(builder:flatbuffers.Builder, visible:boolean) {
  builder.addFieldInt8(0, +visible, +false);
}

static endColorRender(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createColorRender(builder:flatbuffers.Builder, visible:boolean):flatbuffers.Offset {
  ColorRender.startColorRender(builder);
  ColorRender.addVisible(builder, visible);
  return ColorRender.endColorRender(builder);
}
}
